{"name":"Pi Pin Manager","tagline":"Setup Raspberry Pi GPIO pins using a configuration file, not boilerplate","body":"Boilerplate code is annoying and sometimes there can be a lot of it working with [Raspberry Pi GPIO](https://pypi.python.org/pypi/RPi.GPIO). I got tired of setting the board mode and declaring GPIO channels in every script so I made a library that uses a config file instead. In addition to getting rid of the boilerplate, **Pi-Pin-Manager** offers a cleaner interface for working with [RPi.GPIO](https://pypi.python.org/pypi/RPi.GPIO).\r\n\r\n\r\n### Install it\r\n\r\n```\r\npip install Pi-Pin-Manager\r\n```\r\n\r\n#### Example Config File\r\n\r\nThe following snippet shows an example configuration file:\r\n\r\n```yaml\r\n18:\r\n  mode: OUT\r\n  initial: LOW\r\n23:\r\n  mode: OUT\r\n  initial: HIGH\r\n24:  \r\n  mode: IN\r\n  resistor: PUD_UP\r\n```\r\n\r\n\r\n#### Notes\r\n\r\n* Add a numbered item for each pin\r\n* `mode` - This controls whether the pin will be used for input or output. Accepted values are: `IN`, `OUT`. (Required)\r\n* `initial` - This controls the starting value of the pin. Accepted values are: `LOW`, `HIGH`. (Optional - defaults to `LOW`)\r\n* `resistor` - This controls the software defined pull up/pull down resistor available in the Broadcom SOC. Accepted values are: `PUD_UP`, `PUD_DOWN`, `PUD_OFF`. (Optional - defaults to `PUD_OFF`)\r\n\r\nFor full documentation about available GPIO input pin configurations see the [documentation](http://sourceforge.net/p/raspberry-gpio-python/wiki/Examples/).\r\n\r\n\r\n#### Example\r\n\r\nThe following snippet demonstrates a `PinManager` instance using the example config file referenced above. The `PinManager` instance will have named attributes for each pin number you defined in the config file.\r\n\r\n```python\r\nimport RPi.GPIO as GPIO\r\nfrom pi_pin_manager import PinManager\r\n\r\n\r\nCONFIG_FILE = 'path/to/config/file.yml'\r\n\r\nmanager = PinManager(config_file=CONFIG_FILE, gpio=GPIO)\r\n\r\n# Turn on pin 18\r\nmanager.pin_18.on()\r\n\r\n# Turn off pin 18\r\nmanager.pin_18.off()\r\n\r\n# Read pin 18\r\nmanager.pin_18.read()\r\n\r\n# Settings dictionary for pin 18\r\nmanager.pin_18.settings\r\n```\r\n\r\n\r\n#### Run Tests\r\n\r\n```\r\nnosetests -v --with-coverage --cover-erase --cover-package=pi_pin_manager --cover-html\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}